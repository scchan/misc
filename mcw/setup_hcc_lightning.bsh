#!/bin/bash

#set -x

NUM_THREADS=32
CMAKE_BUILD_TYPE=Release

HCC_DRIVER=https://github.com/RadeonOpenCompute/hcc.git
HCC_DRIVER_CHECKOUT="master"

CLANG_URL=https://github.com/RadeonOpenCompute/hcc-clang.git

SCCHAN_HCC_DRIVER="git@github.com:scchan/hcc.git"
SCCHAN_CLANG_URL="git@github.com:scchan/hcc-clang.git"

#LIGHTNING="https://github.com/llvm-mirror/llvm.git"
#LIGHTNING_CHECKOUT="master"

LIGHTNING="https://github.com/RadeonOpenCompute/llvm.git"
LIGHTNING_CHECKOUT="amd-common"


#LLD="https://github.com/llvm-mirror/lld.git"
#LLD_CHECKOUT="master"

LLD="https://github.com/RadeonOpenCompute/lld.git"
LLD_CHECKOUT="amd-common"

CLANG="https://github.com/RadeonOpenCompute/clang.git"
CLANG_CHECKOUT="amd-common"
 
BUILD_PACKAGE=0

DISTRO=ubuntu

AMDPHDRS_CHECKOUT="master"

#HSA_AMDGPU_GPU_TARGET=fiji
HSA_AMDGPU_GPU_TARGET=AMD:AMDGPU:8:0:3

CXXAMP_ENABLE_BOLT="OFF" 
HCC_RUNTIME_DEBUG=OFF
PROJECT_GENERATORS="Unix Makefiles"

DEBUG_CMAKE=""
SKIP_HCC_CHECKOUT=0
BUILD_AMDPDDRS=0

CLANG_TOT=0


BUILD_DEVICE_LIB=0

BUILD_LC_ONLY=0
BUILD_HCC_ONLY=0

while [[ "$#" > 0 ]]; do case $1 in
  --build)  CMAKE_BUILD_TYPE="$2";;
  --threads) NUM_BUILD_THREADS="$2";;
  --hcc) HCC_DRIVER="$2";;
  --scc_hcc) 
      HCC_DRIVER=$SCCHAN_HCC_DRIVER
      CLANG_URL=$SCCHAN_CLANG_URL
      ;;
  --hcc_tot)
      LLD_CHECKOUT="amd-hcc"
      LIGHTNING_CHECKOUT="amd-hcc"
      HCC_DRIVER_CHECKOUT="clang_tot_upgrade"
      CLANG_TOT=1
      ;;
  --hcc_checkout) HCC_DRIVER_CHECKOUT="$2";;
  --llvm_checkout) LLVM_CHECKOUT="$2";;
  --lld_checkout) LLD_CHECKOUT="$2";;
  --arch) HSA_AMDGPU_GPU_TARGET="$2";;
  --bolt) CXXAMP_ENABLE_BOLT="ON";;
  --debug_rt) 
      HCC_RUNTIME_DEBUG=ON
      ;;
  --eclipse) 
      PROJECT_GENERATORS="Eclipse CDT4 - Unix Makefiles"
      ;;

  --package)
      BUILD_PACKAGE=1
      ;;

  --roc-1.0)
      LIGHTNING="https://github.com/RadeonOpenCompute/llvm.git"
      LIGHTNING_CHECKOUT="roc-1.0"
      HCC_DRIVER_CHECKOUT="roc-1.0"
      AMDPHDRS_CHECKOUT="7187c4f8e6f7bea5c9dcaf8a7010e1fa657d728e"
      BUILD_AMDPDDRS=1
      ;;

  --roc-1.1)
      LIGHTNING="https://github.com/RadeonOpenCompute/llvm.git"
      LIGHTNING_CHECKOUT="roc-1.1.x"
      HCC_DRIVER_CHECKOUT="roc-1.1.x"

      LLD="https://github.com/RadeonOpenCompute/lld.git"
      LLD_CHECKOUT="roc-1.1.x"

      #AMDPHDRS_CHECKOUT="7187c4f8e6f7bea5c9dcaf8a7010e1fa657d728e"
      ;;

  --roc-1.1.x)
      LIGHTNING="https://github.com/RadeonOpenCompute/llvm.git"
      LIGHTNING_CHECKOUT="roc-1.1.x"

      LLD="https://github.com/RadeonOpenCompute/lld.git"
      LLD_CHECKOUT="roc-1.1.x"
      HCC_DRIVER_CHECKOUT="roc-1.1.x"

      ;;


  --roc-1.2.x)
      LIGHTNING="https://github.com/RadeonOpenCompute/llvm.git"
      LIGHTNING_CHECKOUT="roc-1.2.x"

      LLD="https://github.com/RadeonOpenCompute/lld.git"
      LLD_CHECKOUT="roc-1.2.x"
      HCC_DRIVER_CHECKOUT="roc-1.2.x"

      ;;

  --roc-1.3.x)
      LIGHTNING_CHECKOUT="roc-1.3.x"
      LLD_CHECKOUT="roc-1.3.x"
      HCC_DRIVER_CHECKOUT="roc-1.3.x"
      CLANG_CHECKOUT="roc-1.3.x"
      ;;

  --debug_cmake) DEBUG_CMAKE="--debug-output";;
  --skip_hcc_checkout) SKIP_HCC_CHECKOUT=1;;
  --build_lc_only) BUILD_LC_ONLY=1;;
  --build_hcc_only) BUILD_HCC_ONLY=1;;
  --build_device_lib) BUILD_DEVICE_LIB=1;;

  --fedora)DISTRO=fedora;;

  --help) 
     echo "options: "
     echo "  --build <Release|Debug>"
     echo "  --threads <threads>"
     echo "  --hcc <git url for hcc driver>"
     echo "  --scc_hcc"
     echo "  --hcc_tot"
     echo "  --hcc_checkout <branch>"
     echo "  --llvm_checkout <LC branch>"
     echo "  --lld_checkout <lld branch>"
     echo "  --arch <fuji|kaveri|carrizo>"
     echo "  --bolt <ON|OFF>"
     echo "  --debug_rt"
     echo "  --eclipse"
     echo "  --package"
     echo "  --roc-1.0"
     echo "  --roc-1.1"
     echo "  --roc-1.1.x"
     echo "  --roc-1.2.x"
     echo "  --roc-1.3.x"
     echo "  --debug_cmake"
     echo "  --skip_hcc_checkout"
     echo "  --build_lc_only"
     echo "  --build_hcc_only"
     echo "  --build_device_lib"
     echo "  --fedora"
     echo "  --help"
     exit
     ;;
  *);;
  esac; shift
done

echo "hcc: $HCC_DRIVER"
echo "hcc-clang: $CLANG_URL"



if [ $BUILD_HCC_ONLY -eq 0 ]; then

if [ ! -d "./llvm" ]; then
  git clone $LIGHTNING
  cd llvm
  git checkout $LIGHTNING_CHECKOUT
  cd ..
else
  echo "llvm directory already exists, skipping llvm checkout..."
fi

# lld
if [ ! -d "./llvm/tools/lld" ]; then
  cd llvm/tools
  git clone $LLD
  cd lld
  git checkout $LLD_CHECKOUT
  cd ../../..
else
  echo "llvm directory already exists, skipping llvm checkout..."
fi


# plain vanilla clang
#git clone https://github.com/llvm-mirror/clang.git


#build llvm,lld,clang

LC_INSTALL_PATH=/opt/rocm/llvm

cd llvm
mkdir build
cd build

#cmake -DCMAKE_INSTALL_PREFIX=$LC_INSTALL_PATH -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE -DLLVM_TARGETS_TO_BUILD="AMDGPU;X86" ..

cmake -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE -DLLVM_TARGETS_TO_BUILD="AMDGPU;X86" ..

make -j $NUM_THREADS
#sudo make install
cd ../..

fi # if [ $BUILD_HCC_ONLY -eq 1 ] 

if [ $BUILD_LC_ONLY -eq 1 ]; then
  exit;
fi 



AMDPHDRS_DIR=/opt/rocm/bin

if [ $BUILD_AMDPDDRS -eq 1 ]
then
  git clone https://github.com/RadeonOpenCompute/LLVM-AMDGPU-Assembler-Extra.git
  cd LLVM-AMDGPU-Assembler-Extra
  git checkout $AMDPHDRS_CHECKOUT
  mkdir build
  cd build
  cmake  -DLLVM_DIR=../llvm/build  ..
  make -j  $NUM_THREADS
  sudo mkdir -p $AMDPHDRS_DIR
  sudo cp -f amdphdrs/amdphdrs $AMDPHDRS_DIR
  cd ../..
fi

# build hcc with lightning
MY_LLVM_BIN=$(readlink -f llvm/build/bin)
#MY_LLVM_BIN=$LC_INSTALL_PATH/bin

HCC_INSTALL_PATH=/opt/rocm/hcc-lc

DEVICE_LIB_DIR=/opt/rocm/


if [ $CLANG_TOT -ne 0 ]
then
 
   if [ $BUILD_DEVICE_LIB -eq 1 ]
   then 

      mkdir device-lib
      cd device-lib

      if [ ! -d "./llvm" ]; then
        git clone $LIGHTNING
        cd llvm
        git checkout amd-common
        cd ..
      else
        echo "llvm directory already exists, skipping llvm checkout..."
      fi

      # lld
      if [ ! -d "./llvm/tools/lld" ]; then
        cd llvm/tools
        git clone $LLD
        cd lld
        git checkout amd-common
        cd ../../..
      else
        echo "llvm directory already exists, skipping llvm checkout..."
      fi


      # clang
      if [ ! -d "./llvm/tools/clang" ]; then
        cd llvm/tools
        git clone $CLANG
        cd clang
        git checkout amd-common
        cd ../../..
      else
        echo "llvm directory already exists, skipping llvm checkout..."
      fi

      mkdir -p llvm/build
      cd llvm/build
      cmake -DLLVM_TARGETS_TO_BUILD="AMDGPU;X86" ..
      make -j $NUM_BUILD_THREADS
      cd ../..

      # build ROCm-Device-Libs
      git clone https://github.com/RadeonOpenCompute/ROCm-Device-Libs.git
      cd ROCm-Device-Libs
      mkdir build
      cd build

      LLVM_BUILD=$(readlink -f ../../llvm/build/)
      HSA_DIR=/opt/rocm/hsa
      DEVICE_LIB_DIR=/opt/rocm/device-libs

      CC=$LLVM_BUILD/bin/clang cmake -DLLVM_DIR=$LLVM_BUILD -DAMDHSACOD=$HSA_DIR/bin/x86_64/amdhsacod  ..
      make -j $NUM_THREADS
      make package
      sudo dpkg -i *deb

      cd ../..

      cd ..
    fi

   if [ $SKIP_HCC_CHECKOUT -eq 0 ]
   then 
     git clone --recursive -b $HCC_DRIVER_CHECKOUT $HCC_DRIVER
   fi

   mkdir build
   cd build

   cmake $DEBUG_CMAKE  ../hcc \
     -DCMAKE_INSTALL_PREFIX=$HCC_INSTALL_PATH \
     -DCXXAMP_ENABLE_BOLT=$CXXAMP_ENABLE_BOLT \
     -DNUM_BUILD_THREADS=$NUM_THREADS \
     -DHSA_USE_AMDGPU_BACKEND=ON \
     -DHSA_LLVM_BIN_DIR=$MY_LLVM_BIN \
     -DHSA_AMDGPU_GPU_TARGET=$HSA_AMDGPU_GPU_TARGET \
     -DHCC_RUNTIME_DEBUG=$HCC_RUNTIME_DEBUG \
     -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
     -G"$PROJECT_GENERATORS" \
     -DDISTRO=$DISTRO \
     -DROCM_DEVICE_LIB_DIR=$DEVICE_LIB_DIR/lib

else
  # not clang_tot

  if [ $SKIP_HCC_CHECKOUT -eq 0 ]
  then 
    git clone $HCC_DRIVER
    cd hcc
    git checkout $HCC_DRIVER_CHECKOUT
    cd ..
  fi

  mkdir build
  cd build

  cmake $DEBUG_CMAKE  ../hcc \
    -DCMAKE_INSTALL_PREFIX=$HCC_INSTALL_PATH \
    -DCXXAMP_ENABLE_BOLT=$CXXAMP_ENABLE_BOLT \
    -DNUM_BUILD_THREADS=$NUM_THREADS \
    -DHSA_USE_AMDGPU_BACKEND=ON \
    -DHSA_LLVM_BIN_DIR=$MY_LLVM_BIN \
    -DHSA_AMDGPU_GPU_TARGET=$HSA_AMDGPU_GPU_TARGET \
    -DHCC_RUNTIME_DEBUG=$HCC_RUNTIME_DEBUG \
    -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
    -DDISTRO=$DISTRO \
    -G"$PROJECT_GENERATORS" 
fi

make -j $NUM_THREADS world
make -j $NUM_THREADS


if [ $BUILD_PACKAGE -eq 1 ]
then 
  make package
fi

